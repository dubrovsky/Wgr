package com.bivc.cimsmgs.db.ky;

// Generated 19.02.2014 14:19:48 by Hibernate Tools 3.4.0.CR1

import com.bivc.cimsmgs.dao.NsiClientDAO;
import com.bivc.cimsmgs.db.BoardMessenger;
import com.bivc.cimsmgs.db.BoardTalkNewMess;
import com.bivc.cimsmgs.db.PackDoc;
import com.bivc.cimsmgs.db.Route;
import com.bivc.cimsmgs.db.nsi.Client;
import com.bivc.cimsmgs.doc2doc.orika.Mapper;
import com.bivc.cimsmgs.dto.ky2.VagonBindDTO;
import com.bivc.cimsmgs.dto.ky2.VagonDTO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;

/**
 * Poezd generated by hbm2java
 */
public class Poezd implements Serializable, PoezdZayavParent, BoardMessenger {

    private static final Logger log = LoggerFactory.getLogger(Poezd.class);

    private Long hid;
    private Route route;
    private PackDoc packDoc;
    private Client client;
    private String trans;

    private Date dattr;
    private String un;

    private Date altered;
    private String nppr;

    private Date dprb;

    private Date dotp;

    private Date dpogr;
    private Date duved;

    private Set<Vagon> vagons = new TreeSet<>();
    private Byte koleya;
    private Byte direction;
    private String npprm;
    private String ksto_f;
    private String nsto_f;
    private String admon_f;
    private String kstn;
    private String nstn;
    private String admnn;
    private String gruzotpr;
    private Integer vagCount;
    private Integer kontCount;
    private Set<KontGruzHistory> history = new TreeSet<>();
    private Set<VagonHistory> vagHistory = new TreeSet<>();
    private Long messCount;
    private Set<BoardTalkNewMess> boardTalkNewMesses = new TreeSet<>();
    private long newMessCount;

    public Set<BoardTalkNewMess> getBoardTalkNewMesses() {
        return boardTalkNewMesses;
    }

    public void setBoardTalkNewMesses(Set<BoardTalkNewMess> boardTalkNewMesses) {
        this.boardTalkNewMesses = boardTalkNewMesses;
    }

    public Date getDuved() {
        return duved;
    }

    public void setDuved(Date duved) {
        this.duved = duved;
    }

    public Date getDpogr() {
        return dpogr;
    }

    public void setDpogr(Date dpogr) {
        this.dpogr = dpogr;
    }

    public Long getMessCount() {
        return messCount;
    }

    public void setMessCount(Long messCount) {
        this.messCount = messCount;
    }

    public Set<VagonHistory> getVagHistory() {
        return vagHistory;
    }

    public void setVagHistory(Set<VagonHistory> vagHistory) {
        this.vagHistory = vagHistory;
    }

    @Override
    public Client getClient() {
        return client;
    }

    public void setClient(Client client) {
        this.client = client;
    }

    public Set<KontGruzHistory> getHistory() {
        return history;
    }

    public void setHistory(Set<KontGruzHistory> history) {
        this.history = history;
    }


    public String getKsto_f() {
        return ksto_f;
    }

    public void setKsto_f(String ksto_f) {
        this.ksto_f = ksto_f;
    }

    public String getNsto_f() {
        return nsto_f;
    }

    public void setNsto_f(String nsto_f) {
        this.nsto_f = nsto_f;
    }

    public String getAdmon_f() {
        return admon_f;
    }

    public void setAdmon_f(String admon_f) {
        this.admon_f = admon_f;
    }

    public String getKstn() {
        return kstn;
    }

    public void setKstn(String kstn) {
        this.kstn = kstn;
    }

    public String getNstn() {
        return nstn;
    }

    public void setNstn(String nstn) {
        this.nstn = nstn;
    }

    public String getAdmnn() {
        return admnn;
    }

    public void setAdmnn(String admnn) {
        this.admnn = admnn;
    }

    public Integer getVagCount() {
        return vagons.size();
    }

    public Integer getKontCount() {
        int konts = 0;
        for (Vagon vagon : vagons)
            konts += vagon.getKonts().size();
        return konts;
    }

    @Override
    public String getGruzotpr() {
        return gruzotpr;
    }

    public void setGruzotpr(String gruzotpr) {
        this.gruzotpr = gruzotpr;
    }

    public Map<String, List<?>> bindPoezdToAvtos(TreeSet<VagonBindDTO> dtos, List<Avto> avtos, Mapper mapper) {
        Map<String, List<?>> contGruz4History = new HashMap<>(2);
        contGruz4History.put("konts", new ArrayList<Kont>());
        contGruz4History.put("gruzs", new ArrayList<Gruz>());

        for (VagonBindDTO vagonIntoDTO : dtos) {
            for (Vagon vagon : getVagons()) {
                if (Objects.equals(vagon.getHid(), vagonIntoDTO.getHid())) {
                    mapper.map(vagonIntoDTO, vagon); // update otpravka
                    if (vagonIntoDTO.getOtpravka() == Otpravka.CONT) {
                        List<Kont> konts = vagon.bindKontsToAvtoKonts(vagonIntoDTO.getKonts(), mapper, avtos);
                        ((List<Kont>) contGruz4History.get("konts")).addAll(konts);
                    } else if (vagonIntoDTO.getOtpravka() == Otpravka.GRUZ) {
                        List<Gruz> gruzs = vagon.bindGruzsToAvtoGruzs(vagonIntoDTO.getGruzs(), mapper, avtos);
                        ((List<Gruz>) contGruz4History.get("gruzs")).addAll(gruzs);
                    }
                    break;
                }
            }
        }
        return contGruz4History;
    }

    public long getNewMessCount() {
        return newMessCount;
    }

    public void setNewMessCount(long newMessCount) {
        this.newMessCount = newMessCount;
    }

    public enum FilterFields {
        NPPR("nppr"),
        SNAME("sname"),
        NPPRM("npprm"),
        STARTDATE("startDate");
        private final String name;

        FilterFields(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }
    }

    public String getNpprm() {
        return npprm;
    }

    public void setNpprm(String npprm) {
        this.npprm = npprm;
    }

    public Byte getDirection() {
        return direction;
    }

    public void setDirection(Byte direction) {
        this.direction = direction;
    }

    public Byte getKoleya() {
        return koleya;
    }

    public void setKoleya(Byte koleya) {
        this.koleya = koleya;
    }

    public Poezd() {
    }

    public Poezd(Long hid) {
        this.hid = hid;
    }

    public Poezd(Long hid, Route route, PackDoc packDoc, String trans, Date dattr, String un, Date altered, String nppr, Date dprb, Byte koleya,
                 Byte direction, Date dotp, Set<Vagon> vagons) {
        this.hid = hid;
        this.route = route;
        this.packDoc = packDoc;
        this.trans = trans;
        this.dattr = dattr;
        this.un = un;
        this.altered = altered;
        this.nppr = nppr;
        this.dprb = dprb;
        this.koleya = koleya;
        this.direction = direction;
        this.dotp = dotp;
        this.vagons = vagons;
    }

    public Long getHid() {
        return this.hid;
    }

    public void setHid(Long hid) {
        this.hid = hid;
    }

    public Route getRoute() {
        return this.route;
    }

    public void setRoute(Route route) {
        this.route = route;
    }

    public PackDoc getPackDoc() {
        return this.packDoc;
    }

    @Override
    public String getDocName() {
        if (direction == 1 && koleya == 2) {
            return "poezd2innar";
        } else if (direction == 2 && koleya == 2) {
            return "poezd2outnar";
        } else if (direction == 1 && koleya == 1) {
            return "poezd2inwide";
        } else if (direction == 2 && koleya == 1) {
            return "poezd2outwide";
        }
        return null;
    }

    public void setPackDoc(PackDoc packDoc) {
        this.packDoc = packDoc;
    }

    public String getTrans() {
        return this.trans;
    }

    public void setTrans(String trans) {
        this.trans = trans;
    }

    public Date getDattr() {
        return this.dattr;
    }

    public void setDattr(Date dattr) {
        this.dattr = dattr;
    }

    public String getUn() {
        return this.un;
    }

    public void setUn(String un) {
        this.un = un;
    }

    public Date getAltered() {
        return this.altered;
    }

    public void setAltered(Date altered) {
        this.altered = altered;
    }

    public String getNppr() {
        return this.nppr;
    }

    public void setNppr(String nppr) {
        this.nppr = nppr;
    }

    public Date getDprb() {

        return this.dprb;
    }

    public void setDprb(Date dprb) {
        this.dprb = dprb;
    }


    public Date getDotp() {

        return this.dotp;
    }

    public void setDotp(Date dotp) {
        this.dotp = dotp;
    }

    /*public Set<Kont> getKontsOut() {
        return this.kontsOut;
    }

    public void setKontsOut(Set<Kont> kontsOut) {
        this.kontsOut = kontsOut;
    }

    public Set<Kont> getKontsInto() {
        return this.kontsInto;
    }

    public void setKontsInto(Set<Kont> kontsInto) {
        this.kontsInto = kontsInto;
    }*/

    @Override
    public Set<Vagon> getVagons() {
        return this.vagons;
    }

    public void setVagons(Set<Vagon> vagons) {
        this.vagons = vagons;
    }

    public boolean hasPack() {
        return (this.getPackDoc() != null && this.getPackDoc().getHid() != null);
    }

    public Map<String, List<?>> bindPoezdsToPoezd(Set<VagonBindDTO> vagonDTOS, Set<Vagon> vagonsOut, Mapper mapper, List<Poezd> poezds) {
        Map<String, List<?>> vagContGruz4History = new HashMap<>(3);
        vagContGruz4History.put("konts", new ArrayList<Kont>());
        vagContGruz4History.put("gruzs", new ArrayList<Gruz>());
        vagContGruz4History.put("vags", new ArrayList<Vagon>());

        // update vag that not moved
        Set<VagonBindDTO> dtoToRemove = new HashSet<>();
        for (VagonBindDTO vagonDTO : vagonDTOS) {
            for (Vagon vagon : getVagons()) {
                if (Objects.equals(vagon.getHid(), vagonDTO.getHid())) {
                    mapper.map(vagonDTO, vagon); // update otpravka
                    dtoToRemove.add(vagonDTO);

                    if (vagonDTO.getOtpravka() == Otpravka.CONT) {
                        List<Kont> konts = vagon.bindKontsToPoezdKonts(vagonDTO.getKonts(), mapper, vagonsOut, poezds);
                        ((List<Kont>) vagContGruz4History.get("konts")).addAll(konts);
                    } else if (vagonDTO.getOtpravka() == Otpravka.GRUZ) {
                        List<Gruz> gruzs = vagon.bindGruzsToPoezdGruzs(vagonDTO.getGruzs(), mapper, vagonsOut, poezds);
                        ((List<Gruz>) vagContGruz4History.get("gruzs")).addAll(gruzs);
                    }
                    break;
                }
            }
        }
        vagonDTOS.removeAll(dtoToRemove);

        // insert from other poezd
        dtoToRemove.clear();
        boolean found;
        for (VagonBindDTO vagonDTO : vagonDTOS) {
            for (Vagon toVagon : vagonsOut) {// add vag from another poezd
                if (Objects.equals(toVagon.getHid(), vagonDTO.getHid())) {
                    mapper.map(vagonDTO, toVagon);  // update vag, otpravka can change
                    bindVagon(toVagon);
                    ((List<Vagon>) vagContGruz4History.get("vags")).add(toVagon);
                    log.info("Add vag to poezd from another poezd, vag - {}", toVagon.getNvag());
                    dtoToRemove.add(vagonDTO);
                    found = true;

                    if (vagonDTO.getOtpravka() == Otpravka.CONT) {
                        List<Kont> konts = toVagon.bindKontsToPoezdKonts(vagonDTO.getKonts(), mapper, vagonsOut, poezds);
//                        ((List<Kont>) vagContGruz4History.get("konts")).addAll(konts);
                        ((List<Kont>) vagContGruz4History.get("konts")).addAll(toVagon.getKonts());
                    } else if (vagonDTO.getOtpravka() == Otpravka.GRUZ) {
                        List<Gruz> gruzs = toVagon.bindGruzsToPoezdGruzs(vagonDTO.getGruzs(), mapper, vagonsOut, poezds);
//                        ((List<Gruz>) vagContGruz4History.get("gruzs")).addAll(gruzs);
                        ((List<Gruz>) vagContGruz4History.get("gruzs")).addAll(toVagon.getGruzs());
                    }

                    break;
                }
            }
        }
        vagonDTOS.removeAll(dtoToRemove);

        if (!vagonDTOS.isEmpty()) { // still have vags - may be when remove vags between poezds
            dtoToRemove.clear();
            found = false;
            for (VagonBindDTO vagonDTO : vagonDTOS) {
                for (Poezd poezd : poezds) {
                    for (Vagon vagon : poezd.getVagons()) {
                        if (Objects.equals(vagon.getHid(), vagonDTO.getHid())) {
                            mapper.map(vagonDTO, vagon);
                            bindVagon(vagon);
                            ((List<Vagon>) vagContGruz4History.get("vags")).add(vagon);
                            log.info("Move vagon in same poezds, vagon - {}", vagon.getNvag());
                            dtoToRemove.add(vagonDTO);
                            found = true;

                            if (vagonDTO.getOtpravka() == Otpravka.CONT) {
                                List<Kont> konts = vagon.bindKontsToPoezdKonts(vagonDTO.getKonts(), mapper, vagonsOut, poezds);
//                                ((List<Kont>) vagContGruz4History.get("konts")).addAll(konts);
                                ((List<Kont>) vagContGruz4History.get("konts")).addAll(vagon.getKonts());
                            } else if (vagonDTO.getOtpravka() == Otpravka.GRUZ) {
                                List<Gruz> gruzs = vagon.bindGruzsToPoezdGruzs(vagonDTO.getGruzs(), mapper, vagonsOut, poezds);
//                                ((List<Gruz>) vagContGruz4History.get("gruzs")).addAll(gruzs);
                                ((List<Gruz>) vagContGruz4History.get("gruzs")).addAll(vagon.getGruzs());
                            }

                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
            }
            vagonDTOS.removeAll(dtoToRemove);
        }

        if (!vagonDTOS.isEmpty()) {
            for (VagonBindDTO vagonBindDTO : vagonDTOS) {
                log.error("Vagon {} was not bound, something wrong!!!", vagonBindDTO.getNvag());
            }
        }

        return vagContGruz4History;
    }

    public Map<String, List<?>> bindPoezdToPoezds(Set<VagonBindDTO> vagonDTOS, List<Poezd> poezdsOut, Mapper mapper) {
        Map<String, List<?>> vagContGruz4History = new HashMap<>(3);
        vagContGruz4History.put("konts", new ArrayList<Kont>());
        vagContGruz4History.put("gruzs", new ArrayList<Gruz>());
        vagContGruz4History.put("vags", new ArrayList<Vagon>());

        // update vag that not moved
        Set<VagonBindDTO> dtoToRemove = new HashSet<>();
        for (VagonBindDTO vagonDTO : vagonDTOS) {
            for (Vagon vagon : getVagons()) {
                if (Objects.equals(vagon.getHid(), vagonDTO.getHid())) {
                    mapper.map(vagonDTO, vagon); // update otpravka
                    dtoToRemove.add(vagonDTO);
                    if (vagonDTO.getOtpravka() == Otpravka.CONT) {
                        List<Kont> konts = vagon.bindKontsToPoezdsKonts(vagonDTO.getKonts(), mapper, poezdsOut);
                        ((List<Kont>) vagContGruz4History.get("konts")).addAll(konts);
                    } else if (vagonDTO.getOtpravka() == Otpravka.GRUZ) {
                        List<Gruz> gruzs = vagon.bindGruzsToPoezdsGruzs(vagonDTO.getGruzs(), mapper, poezdsOut);
                        ((List<Gruz>) vagContGruz4History.get("gruzs")).addAll(gruzs);
                    }
                    break;
                }
            }
        }
        vagonDTOS.removeAll(dtoToRemove);

        // insert from other poezds
        dtoToRemove.clear();
        boolean found;
        for (VagonBindDTO vagonDTO : vagonDTOS) {
            found = false;
            for (Poezd poezd : poezdsOut) {
                for (Vagon poezdVag : poezd.getVagons()) {
                    if (Objects.equals(poezdVag.getHid(), vagonDTO.getHid())) {
                        mapper.map(vagonDTO, poezdVag);
                        bindVagon(poezdVag);
                        ((List<Vagon>) vagContGruz4History.get("vags")).add(poezdVag);
                        log.info("Add vagon from another poezd, vagon - {}", poezdVag.getNvag());
                        dtoToRemove.add(vagonDTO);
                        found = true;

                        if (vagonDTO.getOtpravka() == Otpravka.CONT) {
                            List<Kont> konts = poezdVag.bindKontsToPoezdsKonts(vagonDTO.getKonts(), mapper, poezdsOut);
//                            ((List<Kont>) vagContGruz4History.get("konts")).addAll(konts);
                            ((List<Kont>) vagContGruz4History.get("konts")).addAll(poezdVag.getKonts());
                        } else if (vagonDTO.getOtpravka() == Otpravka.GRUZ) {
                            List<Gruz> gruzs = poezdVag.bindGruzsToPoezdsGruzs(vagonDTO.getGruzs(), mapper, poezdsOut);
//                            ((List<Gruz>) vagContGruz4History.get("gruzs")).addAll(gruzs);
                            ((List<Gruz>) vagContGruz4History.get("gruzs")).addAll(poezdVag.getGruzs());
                        }

                        break;
                    }
                }
                if (found) {
                    break;
                }
            }
        }
        vagonDTOS.removeAll(dtoToRemove);

        if (!vagonDTOS.isEmpty()) {
            for (VagonBindDTO vagonDTO : vagonDTOS) {
                log.error("Kont {} was not bound, something wrong!!!", vagonDTO.getNvag());
            }
        }

        return vagContGruz4History;
    }

    public Vagon bindVagon(Vagon vagon) {
        vagon.setPoezd(this);
        return vagon;
    }

    public Map<String, List<?>> bindPoezdToYard(Set<VagonBindDTO> dtos, List<YardSector> yardSectors, Mapper mapper, Date dotp) {
        Map<String, List<?>> contGruz4History = new HashMap<>(2);
        contGruz4History.put("konts", new ArrayList<Kont>());

        for (VagonBindDTO vagonIntoDTO : dtos) {
            for (Vagon vagon : getVagons()) {
                if (Objects.equals(vagon.getHid(), vagonIntoDTO.getHid())) {
                    mapper.map(vagonIntoDTO, vagon); // update otpravka
                    List<Kont> konts = vagon.bindKontsToYardKonts(vagonIntoDTO.getKonts(), mapper, yardSectors, dotp);
                    ((List<Kont>) contGruz4History.get("konts")).addAll(konts);
                    break;
                }
            }
        }
        return contGruz4History;
    }

    public Map<String, List<?>> bindPoezdsToAvto(Set<VagonBindDTO> dtos, Avto avto, Mapper mapper, List<Poezd> poezds) {
        Map<String, List<?>> contGruz4History = new HashMap<>(2);
        contGruz4History.put("konts", new ArrayList<Kont>());
        contGruz4History.put("gruzs", new ArrayList<Gruz>());

        for (VagonBindDTO vagonIntoDTO : dtos) {
            for (Vagon vagon : getVagons()) {
                if (Objects.equals(vagon.getHid(), vagonIntoDTO.getHid())) {
                    mapper.map(vagonIntoDTO, vagon); // update otpravka
                    if (vagonIntoDTO.getOtpravka() == Otpravka.CONT) {
                        List<Kont> konts = vagon.bindKontsToPoezdKonts(vagonIntoDTO.getKonts(), mapper, avto, poezds);
                        ((List<Kont>) contGruz4History.get("konts")).addAll(konts);
                    } else if (vagonIntoDTO.getOtpravka() == Otpravka.GRUZ) {
                        List<Gruz> gruzs = vagon.bindGruzsToPoezdGruzs(vagonIntoDTO.getGruzs(), mapper, avto, poezds);
                        ((List<Gruz>) contGruz4History.get("gruzs")).addAll(gruzs);
                    }
                    break;
                }
            }
        }
        return contGruz4History;
    }


    public Map<String, List<?>> updateVags(Set<VagonDTO> dtos, Mapper mapper, NsiClientDAO clientDAO) {
        // delete
        Set<Vagon> vagsToRemove = new HashSet<>();
        for (Vagon vagon : getVagons()) {
            boolean found = false;
            for (VagonDTO vagonDTO : dtos) {
                if (Objects.equals(vagon.getHid(), vagonDTO.getHid())) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                vagsToRemove.add(vagon);
            }
        }
        for (Vagon vagon : vagsToRemove) {
            removeVagon(vagon);
        }


        Map<String, List<?>> vagContGruz4History = new HashMap<>(3);
        vagContGruz4History.put("konts", new ArrayList<Kont>());
        vagContGruz4History.put("gruzs", new ArrayList<Gruz>());
        vagContGruz4History.put("vags", new ArrayList<Vagon>());

        // update
        Set<VagonDTO> vagsDtoToRemove = new HashSet<>();
        for (Vagon vagon : getVagons()) {
            for (VagonDTO vagonIntoDTO : dtos) {
                if (Objects.equals(vagon.getHid(), vagonIntoDTO.getHid())) {
                    mapper.map(vagonIntoDTO, vagon);
                    if (vagonIntoDTO.getOtpravka() == Otpravka.CONT) {
                        List<Kont> konts = vagon.updateKonts(vagonIntoDTO.getKonts(), mapper, clientDAO);
                        ((List<Kont>) vagContGruz4History.get("konts")).addAll(konts);
                    } else if (vagonIntoDTO.getOtpravka() == Otpravka.GRUZ) {
                        List<Gruz> gruzs = vagon.updateGruzs(vagonIntoDTO.getGruzs(), mapper, clientDAO);
                        ((List<Gruz>) vagContGruz4History.get("gruzs")).addAll(gruzs);
                    } else {  // can be deleted and getOtpravka is null
                        vagon.removeKonts();
                        vagon.removeGruzy();
                    }
                    vagsDtoToRemove.add(vagonIntoDTO);
                    break;
                }
            }
        }
        dtos.removeAll(vagsDtoToRemove);

        // insert
        for (VagonDTO vagonIntoDTO : dtos) {
            Vagon vagon = mapper.map(vagonIntoDTO, Vagon.class);
            addVagon(vagon);
            ((List<Vagon>) vagContGruz4History.get("vags")).add(vagon);
            if (vagonIntoDTO.getOtpravka() == Otpravka.CONT) {
                List<Kont> konts = vagon.updateKonts(vagonIntoDTO.getKonts(), mapper, clientDAO);
                ((List<Kont>) vagContGruz4History.get("konts")).addAll(konts);
            } else if (vagonIntoDTO.getOtpravka() == Otpravka.GRUZ) {
                List<Gruz> gruzs = vagon.updateGruzs(vagonIntoDTO.getGruzs(), mapper, clientDAO);
                ((List<Gruz>) vagContGruz4History.get("gruzs")).addAll(gruzs);
            }
        }
        return vagContGruz4History;
    }

    @Override
    public Vagon addVagon(Vagon vagon) {
        vagons.add(vagon);
        vagon.setPoezd(this);
        return vagon;
    }

    public void removeVagon(Vagon vagon) {
        vagons.remove(vagon);
        vagon.setPoezd(null);
    }

    public void removeVagons() {
        for (Iterator<Vagon> iterator = vagons.iterator(); iterator.hasNext(); ) {   // avoid ConcurrentModificationException
            Vagon vagon = iterator.next();
            iterator.remove();
            vagon.setPoezd(null);
        }
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Poezd poezd = (Poezd) o;
        return hid.equals(poezd.hid) &&
                trans.equals(poezd.trans) &&
                dattr.equals(poezd.dattr) &&
                un.equals(poezd.un) &&
                altered.equals(poezd.altered) &&
                nppr.equals(poezd.nppr) &&
                dprb.equals(poezd.dprb) &&
                dotp.equals(poezd.dotp) &&
                dpogr.equals(poezd.dpogr) &&
                koleya.equals(poezd.koleya) &&
                direction.equals(poezd.direction) &&
                npprm.equals(poezd.npprm) &&
                ksto_f.equals(poezd.ksto_f) &&
                nsto_f.equals(poezd.nsto_f) &&
                admon_f.equals(poezd.admon_f) &&
                kstn.equals(poezd.kstn) &&
                nstn.equals(poezd.nstn) &&
                admnn.equals(poezd.admnn) &&
                gruzotpr.equals(poezd.gruzotpr);
    }

    @Override
    public int hashCode() {
        return Objects.hash(hid, trans, dattr, un, altered, nppr, dprb, dotp, dpogr, koleya, direction, npprm, ksto_f, nsto_f, admon_f, kstn, nstn, admnn, gruzotpr);
    }
}

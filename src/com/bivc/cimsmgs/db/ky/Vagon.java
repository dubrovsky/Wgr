package com.bivc.cimsmgs.db.ky;

// Generated 19.02.2014 14:19:48 by Hibernate Tools 3.4.0.CR1

import com.bivc.cimsmgs.doc2doc.orika.Mapper;
import com.bivc.cimsmgs.dto.ky2.GruzBindDTO;
import com.bivc.cimsmgs.dto.ky2.GruzDTO;
import com.bivc.cimsmgs.dto.ky2.KontBindDTO;
import com.bivc.cimsmgs.dto.ky2.KontDTO;
import com.bivc.cimsmgs.formats.json.serializers.DateSerializer;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.*;

/**
 * Vagon generated by hbm2java
 */

public class Vagon implements Serializable, Comparable<Vagon> {

    private static final Logger log = LoggerFactory.getLogger(Vagon.class);

    private Long hid;
    private Poezd poezd;
    private String trans;

    private Date dattr;
    private String un;

    private Date altered;


    private String nvag;
    private Byte koleya;

    private Date dprb;

    private Date dotp;

    private Byte direction;
    private Short sort;
    /*private Set<Kont> kontsOut = new TreeSet<>();
    private Set<Kont> kontsInto = new TreeSet<>();*/
    private Set<Kont> konts = new TreeSet<>();
    private Set<Gruz> gruzs = new TreeSet<>();
    private String kpv;
    private Integer kolOs;
    private Long masTar;
    private String sobstv;

    @JsonSerialize(using = DateSerializer.class)
    private Date bortDate;
    private String prim;
    private Long probeg;
    private BigDecimal podSila;

    private Date plan_rem;
    private Date reviz;
    private Long type_no;
    private BigDecimal dlina;
    private String model;
    private String line;
    private String foot;
    private Boolean poruz;
    private Boolean defective;
    private NsiKyOwners owner;
    private Otpravka otpravka;

    public NsiKyOwners getOwner() {
        return owner;
    }

    public void setOwner(NsiKyOwners owner) {
        this.owner = owner;
    }

    public Boolean getDefective() {
        return defective;
    }

    public void setDefective(Boolean defective) {
        this.defective = defective;
    }

    public Boolean getPoruz() {
        return poruz;
    }

    public void setPoruz(Boolean poruz) {
        this.poruz = poruz;
    }

    public String getFoot() {
        return foot;
    }

    public void setFoot(String foot) {
        this.foot = foot;
    }

    public String getLine() {
        return line;
    }

    public void setLine(String line) {
        this.line = line;
    }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    public BigDecimal getDlina() {
        return dlina;
    }

    public void setDlina(BigDecimal dlina) {
        this.dlina = dlina;
    }

    public Long getType_no() {
        return type_no;
    }

    public void setType_no(Long type_no) {
        this.type_no = type_no;
    }

    public Date getReviz() {
        return reviz;
    }

    public void setReviz(Date reviz) {
        this.reviz = reviz;
    }

    public Date getPlan_rem() {
        return plan_rem;
    }

    public void setPlan_rem(Date plan_rem) {
        this.plan_rem = plan_rem;
    }

    public Set<Gruz> getGruzs() {
        return gruzs;
    }

    public void setGruzs(Set<Gruz> gruzs) {
        this.gruzs = gruzs;
    }

    public List<Gruz> bindGruzsToPoezdGruzs(Set<GruzBindDTO> dtos, Mapper mapper, Set<Vagon> toVags, List<Poezd> poezds) {
        // update gruz that not moved
        Set<GruzBindDTO> dtoToRemove = new HashSet<>();
        for (GruzBindDTO gruzBindDTO : dtos) {
            for (Gruz gruz : getGruzs()) {
                if (Objects.equals(gruz.getHid(), gruzBindDTO.getHid())) {
                    mapper.map(gruzBindDTO, gruz);  // update gruz, sort can change
                    dtoToRemove.add(gruzBindDTO);
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        List<Gruz> gruzsForHistory = new ArrayList<>(dtos.size());
        // insert from poezd
        dtoToRemove.clear();
        boolean found = false;
        for (GruzBindDTO gruzBindDTO : dtos) {
            for (Vagon toVagon : toVags) {// add gruz from another poezd
                for (Gruz toGruz : toVagon.getGruzs()) {
                    if (Objects.equals(toGruz.getHid(), gruzBindDTO.getHid())) {
                        mapper.map(gruzBindDTO, toGruz);  // update Gruz, sort can change
                        bindGruz(toGruz);
                        gruzsForHistory.add(toGruz);
                        log.info("Add gruz to poezd from another poezd, gruz - {}", toGruz.getKgvn());
                        dtoToRemove.add(gruzBindDTO);
                        found = true;
                        break;
                    }
                }
                if (found) {
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        if (!dtos.isEmpty()) { // still have Gruz - may be when remove Gruz between poezds
            dtoToRemove.clear();
            found = false;
            for (GruzBindDTO gruzBindDTO : dtos) {
                for (Poezd poezd : poezds) {
                    for (Vagon vagon : poezd.getVagons()) {
                        for (Gruz gruz : vagon.getGruzs()) {
                            if (Objects.equals(gruz.getHid(), gruzBindDTO.getHid())) {
                                mapper.map(gruzBindDTO, gruz);
                                bindGruz(gruz);
                                gruzsForHistory.add(gruz);
                                log.info("Move gruz in same poezds, gruz - {}", gruz.getKgvn());
                                dtoToRemove.add(gruzBindDTO);
                                found = true;
                                break;
                            }
                        }
                        if (found) {
                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
            }
            dtos.removeAll(dtoToRemove);
        }

        if (!dtos.isEmpty()) {
            for (GruzBindDTO gruzBindDTO : dtos) {
                log.warn("Gruz {} was not bound, something wrong!!!", gruzBindDTO.getKgvn());
            }
        }
        return gruzsForHistory;
    }

    public List<Kont> bindKontsToPoezdKonts(Set<KontBindDTO> dtos, Mapper mapper, Set<Vagon> toVags, List<Poezd> poezds) {
        // update kont that not moved
        Set<KontBindDTO> dtoToRemove = new HashSet<>();
        for (KontBindDTO kontDTO : dtos) {
            for (Kont kont : getKonts()) {
                if (Objects.equals(kont.getHid(), kontDTO.getHid())) {
                    mapper.map(kontDTO, kont);  // update kont, sort can change
                    dtoToRemove.add(kontDTO);
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        List<Kont> kontsForHistory = new ArrayList<>(dtos.size());

        // insert from poezd
        dtoToRemove.clear();
        boolean found = false;
        for (KontBindDTO kontDTO : dtos) {
            for (Vagon toVagon : toVags) {// add kont from another poezd
                for (Kont toKont : toVagon.getKonts()) {
                    if (Objects.equals(toKont.getHid(), kontDTO.getHid())) {
                        mapper.map(kontDTO, toKont);  // update kont, sort can change
                        bindKont(toKont);
                        kontsForHistory.add(toKont);
                        log.info("Add kont to poezd from another poezd, kont - {}", toKont.getNkon());
                        dtoToRemove.add(kontDTO);
                        found = true;
                        break;
                    }
                }
                if (found) {
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        if (!dtos.isEmpty()) { // still have conts - may be when remove conts between poezds
            dtoToRemove.clear();
            found = false;
            for (KontBindDTO kontDTO : dtos) {
                for (Poezd poezd : poezds) {
                    for (Vagon vagon : poezd.getVagons()) {
                        for (Kont kont : vagon.getKonts()) {
                            if (Objects.equals(kont.getHid(), kontDTO.getHid())) {
                                mapper.map(kontDTO, kont);
                                bindKont(kont);
                                kontsForHistory.add(kont);
                                log.info("Move kont in same poezds, kont - {}", kont.getNkon());
                                dtoToRemove.add(kontDTO);
                                found = true;
                                break;
                            }
                        }
                        if (found) {
                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
            }
            dtos.removeAll(dtoToRemove);
        }

        if (!dtos.isEmpty()) {
            for (KontBindDTO kontDTO : dtos) {
                log.warn("Kont {} was not bound, something wrong!!!", kontDTO.getNkon());
            }
        }
        return kontsForHistory;
    }

    public List<Gruz> bindGruzsToPoezdsGruzs(Set<GruzBindDTO> dtos, Mapper mapper, List<Poezd> poezdsOut) {
        // update gruzs that not moved
        Set<GruzBindDTO> dtoToRemove = new HashSet<>();
        for (GruzBindDTO gruzDTO : dtos) {
            for (Gruz gruz : getGruzs()) {
                if (Objects.equals(gruz.getHid(), gruzDTO.getHid())) {
                    mapper.map(gruzDTO, gruz);  // update gruz, sort can change
                    dtoToRemove.add(gruzDTO);
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        List<Gruz> gruzsForHistory = new ArrayList<>(dtos.size());
        // insert from poezds
        dtoToRemove.clear();
        boolean found;
        for (GruzBindDTO gruzDTO : dtos) {
            found = false;
            for (Poezd poezd : poezdsOut) {
                for (Vagon vagon : poezd.getVagons()) {
                    for (Gruz gruzKont : vagon.getGruzs()) {
                        if (Objects.equals(gruzKont.getHid(), gruzDTO.getHid())) {
                            mapper.map(gruzDTO, gruzKont);
                            bindGruz(gruzKont);
                            gruzsForHistory.add(gruzKont);
                            log.info("Add Gruz from another poezd, Gruz - {}", gruzKont.getKgvn());
                            dtoToRemove.add(gruzDTO);
                            found = true;
                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
                if (found) {
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        if (!dtos.isEmpty()) { // still have gruzs - may be when remove gruzs in same poesd between vagons
            dtoToRemove.clear();
            for (GruzBindDTO gruzBindDTO : dtos) {
                found = false;
                for (Vagon vagon : getPoezd().getVagons()) {
                    for (Gruz gruz : vagon.getGruzs()) {
                        if (Objects.equals(gruz.getHid(), gruzBindDTO.getHid())) {
                            mapper.map(gruzBindDTO, gruz);
                            bindGruz(gruz);
                            gruzsForHistory.add(gruz);
                            log.info("Move gruz in same poezd, gruz - {}", gruz.getKgvn());
                            dtoToRemove.add(gruzBindDTO);
                            found = true;
                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
            }
            dtos.removeAll(dtoToRemove);
        }

        if (!dtos.isEmpty()) {
            for (GruzBindDTO gruzBindDTO : dtos) {
                log.warn("Gruz {} was not bound, something wrong!!!", gruzBindDTO.getKgvn());
            }
        }
        return gruzsForHistory;
    }

    public List<Kont> bindKontsToPoezdsKonts(Set<KontBindDTO> dtos, Mapper mapper, List<Poezd> poezdsOut) {
        // update kont that not moved
        Set<KontBindDTO> dtoToRemove = new HashSet<>();
        for (KontBindDTO kontDTO : dtos) {
            for (Kont kont : getKonts()) {
                if (Objects.equals(kont.getHid(), kontDTO.getHid())) {
                    mapper.map(kontDTO, kont);  // update kont, sort can change
                    dtoToRemove.add(kontDTO);
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        List<Kont> kontsForHistory = new ArrayList<>(dtos.size());

        // insert from poezds
        dtoToRemove.clear();
        boolean found;
        for (KontBindDTO kontDTO : dtos) {
            found = false;
            for (Poezd poezd : poezdsOut) {
                for (Vagon vagon : poezd.getVagons()) {
                    for (Kont poezdKont : vagon.getKonts()) {
                        if (Objects.equals(poezdKont.getHid(), kontDTO.getHid())) {
                            mapper.map(kontDTO, poezdKont);
                            bindKont(poezdKont);
                            kontsForHistory.add(poezdKont);
                            log.info("Add kont from another poezd, kont - {}", poezdKont.getNkon());
                            dtoToRemove.add(kontDTO);
                            found = true;
                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
                if (found) {
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        if (!dtos.isEmpty()) { // still have conts - may be when remove cont in same poesd between vagons
            dtoToRemove.clear();
            for (KontBindDTO kontDTO : dtos) {
                found = false;
                for (Vagon vagon : getPoezd().getVagons()) {
                    for (Kont kont : vagon.getKonts()) {
                        if (Objects.equals(kont.getHid(), kontDTO.getHid())) {
                            mapper.map(kontDTO, kont);
                            bindKont(kont);
                            kontsForHistory.add(kont);
                            log.info("Move kont in same poezd, kont - {}", kont.getNkon());
                            dtoToRemove.add(kontDTO);
                            found = true;
                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
            }
            dtos.removeAll(dtoToRemove);
        }

        if (!dtos.isEmpty()) {
            for (KontBindDTO kontDTO : dtos) {
                log.warn("Kont {} was not bound, something wrong!!!", kontDTO.getNkon());
            }
        }
        return kontsForHistory;
    }

    public List<Kont> bindKontsToYardKonts(Set<KontBindDTO> dtos, Mapper mapper, List<YardSector> yardSectors) {
        // update kont that not moved
        Set<KontBindDTO> dtoToRemove = new HashSet<>();
        for (KontBindDTO kontDTO : dtos) {
            for (Kont kont : getKonts()) {
                if (Objects.equals(kont.getHid(), kontDTO.getHid())) {
                    mapper.map(kontDTO, kont);  // update kont, sort can change
                    dtoToRemove.add(kontDTO);
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);


        List<Kont> kontsForHistory = new ArrayList<>(dtos.size());
        // insert from yard
        dtoToRemove.clear();
        boolean found;
        for (KontBindDTO kontDTO : dtos) {
            found = false;
            for (YardSector yardSector : yardSectors) {
                for (Yard yard : yardSector.getYards()) {
                    for (Kont yardKont : yard.getKonts()) {
                        if (Objects.equals(yardKont.getHid(), kontDTO.getHid())) {
                            mapper.map(kontDTO, yardKont);
                            bindKont(yardKont);
                            kontsForHistory.add(yardKont);
                            log.info("Add kont from another yard, kont - {}", yardKont.getNkon());
                            dtoToRemove.add(kontDTO);
                            found = true;
                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
                if (found) {
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        if (!dtos.isEmpty()) { // still have conts - may be when remove cont in same poesd between vagons
            dtoToRemove.clear();
            for (KontBindDTO kontDTO : dtos) {
                found = false;
                for (Vagon vagon : getPoezd().getVagons()) {
                    for (Kont kont : vagon.getKonts()) {
                        if (Objects.equals(kont.getHid(), kontDTO.getHid())) {
                            mapper.map(kontDTO, kont);
                            bindKont(kont);
                            kontsForHistory.add(kont);
                            log.info("Move kont in same poezd, kont - {}", kont.getNkon());
                            dtoToRemove.add(kontDTO);
                            found = true;
                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
            }
            dtos.removeAll(dtoToRemove);
        }

        if (!dtos.isEmpty()) {
            for (KontBindDTO kontDTO : dtos) {
                log.warn("Kont {} was not bound, something wrong!!!", kontDTO.getNkon());
            }
        }
        return kontsForHistory;
    }

    /*public void bindKonts(Set<KontBindDTO> dtos, Mapper mapper, Set<Vagon> toVags) {
        // update
        Set<KontBindDTO> dtoToRemove = new HashSet<>();

        for (KontBindDTO kontDTO : dtos) {
            for (Kont kont : getKonts()) {
                if (Objects.equals(kont.getHid(), kontDTO.getHid())) {
                    mapper.map(kontDTO, kont);  // update kont, sort can change
//                    log.info("Update kont - {}", kont.getNkon());
                    dtoToRemove.add(kontDTO);
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        // insert
        dtoToRemove.clear();
        boolean found;
        for (KontBindDTO kontDTO : dtos) {
            found = false;
            for (Vagon toVagon : toVags) {// add kont from another poezd
                for (Kont toKont : toVagon.getKonts()) {
                    if (Objects.equals(toKont.getHid(), kontDTO.getHid())) {
                        mapper.map(kontDTO, toKont);
                        bindKont(toKont);
                        log.info("Add kont from another poezd, kont - {}", toKont.getNkon());
                        dtoToRemove.add(kontDTO);
                        found = true;
                        break;
                    }
                }
                if (found) {
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        if (!dtos.isEmpty()) { // still have conts - may be when remove cont in same poesd between vagons
            dtoToRemove.clear();
            for (KontBindDTO kontDTO : dtos) {
                found = false;
                for (Vagon vagon : getPoezd().getVagons()) {
                    for (Kont kont : vagon.getKonts()) {
                        if (Objects.equals(kont.getHid(), kontDTO.getHid())) {
                            mapper.map(kontDTO, kont);
                            bindKont(kont);
                            log.info("Move kont in same poezd, kont - {}", kont.getNkon());
                            dtoToRemove.add(kontDTO);
                            found = true;
                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
            }
            dtos.removeAll(dtoToRemove);
        }

        if (!dtos.isEmpty()) {
            for (KontBindDTO kontDTO : dtos) {
                log.warn("Kont {} was not bound, something wrong!!!", kontDTO.getNkon());
            }
        }
    }

    public void bindGruzs(TreeSet<GruzBindDTO> dtos, Mapper mapper, Set<Vagon> toVags) {
        // update
        Set<GruzBindDTO> dtoToRemove = new HashSet<>();
        for (GruzBindDTO gruzDTO : dtos) {
            for (Gruz gruz : getGruzs()) {
                if (Objects.equals(gruz.getHid(), gruzDTO.getHid())) {
                    mapper.map(gruzDTO, gruz);  // update gruz, sort can change
                    log.info("Update gruz - {}", gruz.getKgvn());
                    dtoToRemove.add(gruzDTO);
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        // insert
        dtoToRemove.clear();
        boolean found;
        for (GruzBindDTO gruzDTO : dtos) {
            found = false;
            for (Vagon vagon : toVags) {// add gruz from another poezd
                for (Gruz gruz : vagon.getGruzs()) {
                    if (Objects.equals(gruz.getHid(), gruzDTO.getHid())) {
                        mapper.map(gruzDTO, gruz);
                        bindGruz(gruz);
                        log.info("Add gruz from another poezd, gruz - {}", gruz.getKgvn());
                        dtoToRemove.add(gruzDTO);
                        found = true;
                        break;
                    }
                }
                if (found) {
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        if (!dtos.isEmpty()) { // still have conts - may be when remove gruz in same poesd between vagons
            for (GruzBindDTO gruzDTO : dtos) {
                found = false;
                for (Vagon vagon : getPoezd().getVagons()) {
                    for (Gruz gruz : vagon.getGruzs()) {
                        if (Objects.equals(gruz.getHid(), gruzDTO.getHid())) {
                            mapper.map(gruzDTO, gruz);
                            bindGruz(gruz);
                            found = true;
                            log.info("Move gruz in same poezd, gruz - {}", gruz.getKgvn());
                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
            }
        }

        if (!dtos.isEmpty()) {
            for (GruzBindDTO grusDTO : dtos) {
                log.warn("Gruz {} was not bound, something wrong!!!", grusDTO.getKgvn());
            }
        }
    }*/

    private void unbindGruz(Gruz gruz) {
        gruz.setVagon(null);
    }

    public Gruz bindGruz(Gruz gruz) {
        gruz.setVagon(this);
        gruz.setAvto(null);
        return gruz;
    }

    private void unbindKont(Kont kont) {
        kont.setVagon(null);
    }

    public Kont bindKont(Kont kont) {
        kont.setVagon(this);
        kont.setYard(null);
        kont.setAvto(null);
        return kont;
    }


    public List<Kont> updateKonts(TreeSet<KontDTO> dtos, Mapper mapper) {
        // delete
        Set<Kont> kontsToRemove = new HashSet<>();
        for (Kont kont : getKonts()) {
            boolean found = false;
            for (KontDTO kontDTO : dtos) {
                if (Objects.equals(kont.getHid(), kontDTO.getHid())) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                kontsToRemove.add(kont);
            }
        }
        for (Kont kont : kontsToRemove) {
            removeKont(kont);
        }

        // update
        Set<KontDTO> dtoToRemove = new HashSet<>();
        for (Kont kont : getKonts()) {
            for (KontDTO kontDTO : dtos) {
                if (Objects.equals(kont.getHid(), kontDTO.getHid())) {
                    mapper.map(kontDTO, kont);
                    kont.updateGruzs(kontDTO.getGruzs(), mapper);
                    kont.updatePlombs(kontDTO.getPlombs(), mapper);
                    dtoToRemove.add(kontDTO);
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        List<Kont> kontsForHistory = new ArrayList<>(dtos.size());
        // insert
        for (KontDTO kontDTO : dtos) {
            Kont kont = mapper.map(kontDTO, Kont.class);
            addKont(kont);
            kontsForHistory.add(kont);
            kont.updateGruzs(kontDTO.getGruzs(), mapper);
            kont.updatePlombs(kontDTO.getPlombs(), mapper);
        }
        return kontsForHistory;
    }

    private void removeKont(Kont kont) {
        konts.remove(kont);
        kont.setVagon(null);
    }


    public List<Gruz> updateGruzs(TreeSet<GruzDTO> dtos, Mapper mapper) {
        // delete
        Set<Gruz> gruzyToRemove = new HashSet<>();
        for (Gruz gruz : getGruzs()) {
            boolean found = false;
            for (GruzDTO gruzDto : dtos) {
                if (Objects.equals(gruz.getHid(), gruzDto.getHid())) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                gruzyToRemove.add(gruz);
            }
        }
        for (Gruz gruz : gruzyToRemove) {
            removeGruz(gruz);
        }

        // update
        Set<GruzDTO> dtoToRemove = new HashSet<>();
        for (Gruz gruz : getGruzs()) {
            for (GruzDTO gruzDto : dtos) {
                if (Objects.equals(gruz.getHid(), gruzDto.getHid())) {
                    mapper.map(gruzDto, gruz);
                    dtoToRemove.add(gruzDto);
                    break;
                }
            }
        }
        dtos.removeAll(dtoToRemove);

        List<Gruz> gruzsForHistory = new ArrayList<>(dtos.size());
        // insert
        for (GruzDTO gruzDto : dtos) {
            Gruz gruz = mapper.map(gruzDto, Gruz.class);
            addGruz(gruz);
            gruzsForHistory.add(gruz);
        }
        return gruzsForHistory;
    }


    private void removeGruz(Gruz gruz) {
        gruzs.remove(gruz);
        gruz.setVagon(null);
    }

    public Set<Kont> getKonts() {
        return konts;
    }

    public void setKonts(Set<Kont> konts) {
        this.konts = konts;
    }

    public Otpravka getOtpravka() {
        return otpravka;
    }

    public void setOtpravka(Otpravka otpravka) {
        this.otpravka = otpravka;
    }

    public enum FilterFields {
        NPPR("nppr"),
        NVAG("nvag");
        private final String name;

        FilterFields(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }
    }

    public BigDecimal getPodSila() {
        return podSila;
    }

    public void setPodSila(BigDecimal podSila) {
        this.podSila = podSila;
    }

    public Long getProbeg() {
        return probeg;
    }

    public void setProbeg(Long probeg) {
        this.probeg = probeg;
    }

    public String getPrim() {
        return prim;
    }

    public void setPrim(String prim) {
        this.prim = prim;
    }

    public Date getBortDate() {
        return bortDate;
    }

    public void setBortDate(Date bortDate) {
        this.bortDate = bortDate;
    }

    public String getSobstv() {
        return sobstv;
    }

    public void setSobstv(String sobstv) {
        this.sobstv = sobstv;
    }

    public Long getMasTar() {
        return masTar;
    }

    public void setMasTar(Long masTar) {
        this.masTar = masTar;
    }

    public Integer getKolOs() {
        return kolOs;
    }

    public void setKolOs(Integer kolOs) {
        this.kolOs = kolOs;
    }

    public String getKpv() {
        return kpv;
    }

    public void setKpv(String kpv) {
        this.kpv = kpv;
    }

    @Override
    public String toString() {
        return ReflectionToStringBuilder.toStringExclude(this, "kontsOut", "kontsInto", "poezd");
    }

    public Vagon() {
    }

    public Vagon(Long hid) {
        this.hid = hid;
    }

    public Vagon(Long hid, Poezd poezd, String trans, Date dattr, String un, Date altered, String nvag, Byte koleya, Date dprb, Date dotp,
                 Byte direction, Short sort/*, Set<Kont> kontsOut, Set<Kont> kontsInto*/) {
        this.hid = hid;
        this.poezd = poezd;
        this.trans = trans;
        this.dattr = dattr;
        this.un = un;
        this.altered = altered;
        this.nvag = nvag;
        this.koleya = koleya;
        this.dprb = dprb;
        this.dotp = dotp;
        this.direction = direction;
        this.sort = sort;
        /*this.kontsOut = kontsOut;
        this.kontsInto = kontsInto;*/
    }

    public Long getHid() {
        return this.hid;
    }

    public void setHid(Long hid) {
        this.hid = hid;
    }

    public Poezd getPoezd() {
        return this.poezd;
    }

    public void setPoezd(Poezd poezd) {
        this.poezd = poezd;
    }

    public String getTrans() {
        return this.trans;
    }

    public void setTrans(String trans) {
        this.trans = trans;
    }

    public Date getDattr() {
        return this.dattr;
    }

    public void setDattr(Date dattr) {
        this.dattr = dattr;
    }

    public String getUn() {
        return this.un;
    }

    public void setUn(String un) {
        this.un = un;
    }

    public Date getAltered() {
        return this.altered;
    }

    public void setAltered(Date altered) {
        this.altered = altered;
    }

    public String getNvag() {
        return this.nvag;
    }

    public void setNvag(String nvag) {
        this.nvag = nvag;
    }

    public Byte getKoleya() {
        return this.koleya;
    }

    public void setKoleya(Byte koleya) {
        this.koleya = koleya;
    }

    public Date getDprb() {

        /*if (this.dprbDate != null) {
            this.dprb = this.dprbDate;
            if (this.dprbTime != null) {
                this.dprb = DateTimeUtils.addTimeToDate(this.dprbDate, this.dprbTime);
            }
        }*/
        return this.dprb;
    }

    public void setDprb(Date dprb) {
        this.dprb = dprb;
    }

    public Date getDotp() {

        /*if (this.dotpDate != null) {
            this.dotp = this.dotpDate;
            if (this.dotpTime != null) {
                this.dotp = DateTimeUtils.addTimeToDate(this.dotpDate, this.dotpTime);
            }
        }*/
        return this.dotp;
    }

    public void setDotp(Date dotp) {
        this.dotp = dotp;
    }

    public Byte getDirection() {
        return this.direction;
    }

    public void setDirection(Byte direction) {
        this.direction = direction;
    }

    public Short getSort() {
        return this.sort;
    }

    public void setSort(Short sort) {
        this.sort = sort;
    }

   /* public Set<Kont> getKontsOut() {
        return this.kontsOut;
    }

    public void setKontsOut(Set<Kont> kontsOut) {
        this.kontsOut = kontsOut;
    }

    public Set<Kont> getKontsInto() {
        return this.kontsInto;
    }

    public void setKontsInto(Set<Kont> kontsInto) {
        this.kontsInto = kontsInto;
    }*/


    @Override
    public int compareTo(Vagon that) {
        final int BEFORE = -1;
        final int AFTER = 1;

        if (that == null) {
            return BEFORE;
        }

        Comparable thisHid = this.getHid();
        Comparable thatHid = that.getHid();

        if (thisHid == null) {
            return AFTER;
        } else if (thatHid == null) {
            return BEFORE;
        } else {
            return thisHid.compareTo(thatHid);
        }
    }

    public Kont addKont(Kont kont) {
        konts.add(kont);
        kont.setVagon(this);
        return kont;
    }

    public void removeKonts() {
        for (Iterator<Kont> iterator = konts.iterator(); iterator.hasNext(); ) {   // avoid ConcurrentModificationException
            Kont kont = iterator.next();
            kont.removeGruzy();
            iterator.remove();
            kont.setVagon(null);
        }
    }

    public void unbindKonts() {
        for (Iterator<Kont> iterator = konts.iterator(); iterator.hasNext(); ) {   // avoid ConcurrentModificationException
            Kont kont = iterator.next();
            unbindKont(kont);
        }
    }

    public Gruz addGruz(Gruz gruz) {
        gruzs.add(gruz);
        gruz.setVagon(this);
        return gruz;
    }

    public void removeGruzy() {
        for (Iterator<Gruz> iterator = gruzs.iterator(); iterator.hasNext(); ) {   // avoid ConcurrentModificationException
            Gruz gruz = iterator.next();
            iterator.remove();
            gruz.setVagon(null);
        }
    }

    public void unbindGruzy() {
        for (Iterator<Gruz> iterator = gruzs.iterator(); iterator.hasNext(); ) {   // avoid ConcurrentModificationException
            Gruz gruz = iterator.next();
//            iterator.remove();
            unbindGruz(gruz);
        }
    }
}
